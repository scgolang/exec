// Code generated by go-bindata.
// sources:
// sql/createTables.sql
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlCreatetablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6a\xc3\x30\x10\x45\xd7\xa3\x53\xcc\xb2\x85\xdc\xa0\x2b\x37\x9d\x16\xd1\x46\x2e\x8a\x0a\xce\x4a\xa8\xf6\x20\x0c\xb1\x94\x4a\xb5\xc9\xf1\x8b\x83\x09\x4e\x71\xc1\xdd\x0e\xc3\xfb\xef\xff\xad\xa6\xc2\x10\x9a\xe2\xf1\x8d\x50\x3e\xa3\x2a\x0d\x52\x25\xf7\x66\x8f\x3e\xc5\xfe\x94\xed\x31\x7a\xbc\x13\x70\x8c\xde\x66\xfe\xea\x39\xd4\x6c\x43\xdf\x7d\x72\x02\xa9\x0c\xbd\x90\x06\x78\xd7\x72\x57\xe8\x03\xbe\xd2\x01\x8b\x0f\x53\x4a\xb5\xd5\xb4\x23\x65\x36\x02\x5c\xfd\xdd\xc6\x60\x83\xeb\x18\xc0\x50\x35\xde\xea\xd8\x75\x2e\x34\xb6\x6d\xae\xa7\x4b\xda\xed\xd7\x29\xc5\x9a\x73\xbe\x7c\x4d\x51\xe2\xfe\x41\x88\xc9\x59\xaa\x27\xaa\x7e\x39\x4f\x61\x6d\x73\xc6\x52\xdd\x34\x58\xf0\xdf\xe0\xcc\x6d\x06\x5e\x1a\x63\x32\xce\xe3\x14\x2b\xec\xc5\x3a\x9c\x75\xc9\xff\x85\x6c\x9b\x33\x5c\x7b\x8f\x3b\x26\x0f\xff\x83\x73\x18\x56\xb2\x39\x0c\x76\x70\x69\xc6\xff\x09\x00\x00\xff\xff\x9a\x0e\x61\xe7\x18\x02\x00\x00")

func sqlCreatetablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCreatetablesSql,
		"sql/createTables.sql",
	)
}

func sqlCreatetablesSql() (*asset, error) {
	bytes, err := sqlCreatetablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/createTables.sql", size: 536, mode: os.FileMode(420), modTime: time.Unix(1492396469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/createTables.sql": sqlCreatetablesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"createTables.sql": &bintree{sqlCreatetablesSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
